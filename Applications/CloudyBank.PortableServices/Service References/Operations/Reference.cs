//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudyBank.PortableServices.Operations {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationDto", Namespace="http://schemas.datacontract.org/2004/07/CloudyBank.Dto")]
    public partial class OperationDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal AmountField;
        
        private string CurrencyField;
        
        private System.DateTime DateField;
        
        private string DescriptionField;
        
        private string DirectionField;
        
        private int IdField;
        
        private string MotifField;
        
        private string OppositeIbanField;
        
        private int TagIdField;
        
        private string TagNameField;
        
        private string TransactionCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectionField, value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Motif {
            get {
                return this.MotifField;
            }
            set {
                if ((object.ReferenceEquals(this.MotifField, value) != true)) {
                    this.MotifField = value;
                    this.RaisePropertyChanged("Motif");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OppositeIban {
            get {
                return this.OppositeIbanField;
            }
            set {
                if ((object.ReferenceEquals(this.OppositeIbanField, value) != true)) {
                    this.OppositeIbanField = value;
                    this.RaisePropertyChanged("OppositeIban");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((this.TagIdField.Equals(value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionCode {
            get {
                return this.TransactionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionCodeField, value) != true)) {
                    this.TransactionCodeField = value;
                    this.RaisePropertyChanged("TransactionCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="octo.operations.service", ConfigurationName="Operations.WCFOperationService")]
    public interface WCFOperationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="octo.operations.service/WCFOperationService/GetOperationsByAccount", ReplyAction="octo.operations.service/WCFOperationService/GetOperationsByAccountResponse")]
        System.IAsyncResult BeginGetOperationsByAccount(int accountID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<CloudyBank.PortableServices.Operations.OperationDto> EndGetOperationsByAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="octo.operations.service/WCFOperationService/MakeTransfer", ReplyAction="octo.operations.service/WCFOperationService/MakeTransferResponse")]
        System.IAsyncResult BeginMakeTransfer(int debitAccountId, int creditAccountId, decimal amount, string motif, System.AsyncCallback callback, object asyncState);
        
        string EndMakeTransfer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="octo.operations.service/WCFOperationService/MakeTransferToExternal", ReplyAction="octo.operations.service/WCFOperationService/MakeTransferToExternalResponse")]
        System.IAsyncResult BeginMakeTransferToExternal(int debitAccountId, string creditAccountIban, decimal amount, string motif, System.AsyncCallback callback, object asyncState);
        
        string EndMakeTransferToExternal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="octo.operations.service/WCFOperationService/GetOperationById", ReplyAction="octo.operations.service/WCFOperationService/GetOperationByIdResponse")]
        System.IAsyncResult BeginGetOperationById(int operationId, System.AsyncCallback callback, object asyncState);
        
        CloudyBank.PortableServices.Operations.OperationDto EndGetOperationById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="octo.operations.service/WCFOperationService/GetOperationByAccountIdCode", ReplyAction="octo.operations.service/WCFOperationService/GetOperationByAccountIdCodeResponse")]
        System.IAsyncResult BeginGetOperationByAccountIdCode(int accountId, string transactionCode, System.AsyncCallback callback, object asyncState);
        
        CloudyBank.PortableServices.Operations.OperationDto EndGetOperationByAccountIdCode(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WCFOperationServiceChannel : CloudyBank.PortableServices.Operations.WCFOperationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOperationsByAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOperationsByAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<CloudyBank.PortableServices.Operations.OperationDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<CloudyBank.PortableServices.Operations.OperationDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MakeTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MakeTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MakeTransferToExternalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MakeTransferToExternalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOperationByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOperationByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CloudyBank.PortableServices.Operations.OperationDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CloudyBank.PortableServices.Operations.OperationDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOperationByAccountIdCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOperationByAccountIdCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CloudyBank.PortableServices.Operations.OperationDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CloudyBank.PortableServices.Operations.OperationDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFOperationServiceClient : System.ServiceModel.ClientBase<CloudyBank.PortableServices.Operations.WCFOperationService>, CloudyBank.PortableServices.Operations.WCFOperationService {
        
        private BeginOperationDelegate onBeginGetOperationsByAccountDelegate;
        
        private EndOperationDelegate onEndGetOperationsByAccountDelegate;
        
        private System.Threading.SendOrPostCallback onGetOperationsByAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeTransferDelegate;
        
        private EndOperationDelegate onEndMakeTransferDelegate;
        
        private System.Threading.SendOrPostCallback onMakeTransferCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeTransferToExternalDelegate;
        
        private EndOperationDelegate onEndMakeTransferToExternalDelegate;
        
        private System.Threading.SendOrPostCallback onMakeTransferToExternalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOperationByIdDelegate;
        
        private EndOperationDelegate onEndGetOperationByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetOperationByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOperationByAccountIdCodeDelegate;
        
        private EndOperationDelegate onEndGetOperationByAccountIdCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetOperationByAccountIdCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WCFOperationServiceClient() {
        }
        
        public WCFOperationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFOperationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFOperationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFOperationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetOperationsByAccountCompletedEventArgs> GetOperationsByAccountCompleted;
        
        public event System.EventHandler<MakeTransferCompletedEventArgs> MakeTransferCompleted;
        
        public event System.EventHandler<MakeTransferToExternalCompletedEventArgs> MakeTransferToExternalCompleted;
        
        public event System.EventHandler<GetOperationByIdCompletedEventArgs> GetOperationByIdCompleted;
        
        public event System.EventHandler<GetOperationByAccountIdCodeCompletedEventArgs> GetOperationByAccountIdCodeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudyBank.PortableServices.Operations.WCFOperationService.BeginGetOperationsByAccount(int accountID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOperationsByAccount(accountID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<CloudyBank.PortableServices.Operations.OperationDto> CloudyBank.PortableServices.Operations.WCFOperationService.EndGetOperationsByAccount(System.IAsyncResult result) {
            return base.Channel.EndGetOperationsByAccount(result);
        }
        
        private System.IAsyncResult OnBeginGetOperationsByAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int accountID = ((int)(inValues[0]));
            return ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).BeginGetOperationsByAccount(accountID, callback, asyncState);
        }
        
        private object[] OnEndGetOperationsByAccount(System.IAsyncResult result) {
            System.Collections.Generic.List<CloudyBank.PortableServices.Operations.OperationDto> retVal = ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).EndGetOperationsByAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOperationsByAccountCompleted(object state) {
            if ((this.GetOperationsByAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOperationsByAccountCompleted(this, new GetOperationsByAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOperationsByAccountAsync(int accountID) {
            this.GetOperationsByAccountAsync(accountID, null);
        }
        
        public void GetOperationsByAccountAsync(int accountID, object userState) {
            if ((this.onBeginGetOperationsByAccountDelegate == null)) {
                this.onBeginGetOperationsByAccountDelegate = new BeginOperationDelegate(this.OnBeginGetOperationsByAccount);
            }
            if ((this.onEndGetOperationsByAccountDelegate == null)) {
                this.onEndGetOperationsByAccountDelegate = new EndOperationDelegate(this.OnEndGetOperationsByAccount);
            }
            if ((this.onGetOperationsByAccountCompletedDelegate == null)) {
                this.onGetOperationsByAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOperationsByAccountCompleted);
            }
            base.InvokeAsync(this.onBeginGetOperationsByAccountDelegate, new object[] {
                        accountID}, this.onEndGetOperationsByAccountDelegate, this.onGetOperationsByAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudyBank.PortableServices.Operations.WCFOperationService.BeginMakeTransfer(int debitAccountId, int creditAccountId, decimal amount, string motif, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeTransfer(debitAccountId, creditAccountId, amount, motif, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudyBank.PortableServices.Operations.WCFOperationService.EndMakeTransfer(System.IAsyncResult result) {
            return base.Channel.EndMakeTransfer(result);
        }
        
        private System.IAsyncResult OnBeginMakeTransfer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int debitAccountId = ((int)(inValues[0]));
            int creditAccountId = ((int)(inValues[1]));
            decimal amount = ((decimal)(inValues[2]));
            string motif = ((string)(inValues[3]));
            return ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).BeginMakeTransfer(debitAccountId, creditAccountId, amount, motif, callback, asyncState);
        }
        
        private object[] OnEndMakeTransfer(System.IAsyncResult result) {
            string retVal = ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).EndMakeTransfer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMakeTransferCompleted(object state) {
            if ((this.MakeTransferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeTransferCompleted(this, new MakeTransferCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeTransferAsync(int debitAccountId, int creditAccountId, decimal amount, string motif) {
            this.MakeTransferAsync(debitAccountId, creditAccountId, amount, motif, null);
        }
        
        public void MakeTransferAsync(int debitAccountId, int creditAccountId, decimal amount, string motif, object userState) {
            if ((this.onBeginMakeTransferDelegate == null)) {
                this.onBeginMakeTransferDelegate = new BeginOperationDelegate(this.OnBeginMakeTransfer);
            }
            if ((this.onEndMakeTransferDelegate == null)) {
                this.onEndMakeTransferDelegate = new EndOperationDelegate(this.OnEndMakeTransfer);
            }
            if ((this.onMakeTransferCompletedDelegate == null)) {
                this.onMakeTransferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeTransferCompleted);
            }
            base.InvokeAsync(this.onBeginMakeTransferDelegate, new object[] {
                        debitAccountId,
                        creditAccountId,
                        amount,
                        motif}, this.onEndMakeTransferDelegate, this.onMakeTransferCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudyBank.PortableServices.Operations.WCFOperationService.BeginMakeTransferToExternal(int debitAccountId, string creditAccountIban, decimal amount, string motif, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeTransferToExternal(debitAccountId, creditAccountIban, amount, motif, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudyBank.PortableServices.Operations.WCFOperationService.EndMakeTransferToExternal(System.IAsyncResult result) {
            return base.Channel.EndMakeTransferToExternal(result);
        }
        
        private System.IAsyncResult OnBeginMakeTransferToExternal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int debitAccountId = ((int)(inValues[0]));
            string creditAccountIban = ((string)(inValues[1]));
            decimal amount = ((decimal)(inValues[2]));
            string motif = ((string)(inValues[3]));
            return ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).BeginMakeTransferToExternal(debitAccountId, creditAccountIban, amount, motif, callback, asyncState);
        }
        
        private object[] OnEndMakeTransferToExternal(System.IAsyncResult result) {
            string retVal = ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).EndMakeTransferToExternal(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMakeTransferToExternalCompleted(object state) {
            if ((this.MakeTransferToExternalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeTransferToExternalCompleted(this, new MakeTransferToExternalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeTransferToExternalAsync(int debitAccountId, string creditAccountIban, decimal amount, string motif) {
            this.MakeTransferToExternalAsync(debitAccountId, creditAccountIban, amount, motif, null);
        }
        
        public void MakeTransferToExternalAsync(int debitAccountId, string creditAccountIban, decimal amount, string motif, object userState) {
            if ((this.onBeginMakeTransferToExternalDelegate == null)) {
                this.onBeginMakeTransferToExternalDelegate = new BeginOperationDelegate(this.OnBeginMakeTransferToExternal);
            }
            if ((this.onEndMakeTransferToExternalDelegate == null)) {
                this.onEndMakeTransferToExternalDelegate = new EndOperationDelegate(this.OnEndMakeTransferToExternal);
            }
            if ((this.onMakeTransferToExternalCompletedDelegate == null)) {
                this.onMakeTransferToExternalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeTransferToExternalCompleted);
            }
            base.InvokeAsync(this.onBeginMakeTransferToExternalDelegate, new object[] {
                        debitAccountId,
                        creditAccountIban,
                        amount,
                        motif}, this.onEndMakeTransferToExternalDelegate, this.onMakeTransferToExternalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudyBank.PortableServices.Operations.WCFOperationService.BeginGetOperationById(int operationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOperationById(operationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CloudyBank.PortableServices.Operations.OperationDto CloudyBank.PortableServices.Operations.WCFOperationService.EndGetOperationById(System.IAsyncResult result) {
            return base.Channel.EndGetOperationById(result);
        }
        
        private System.IAsyncResult OnBeginGetOperationById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int operationId = ((int)(inValues[0]));
            return ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).BeginGetOperationById(operationId, callback, asyncState);
        }
        
        private object[] OnEndGetOperationById(System.IAsyncResult result) {
            CloudyBank.PortableServices.Operations.OperationDto retVal = ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).EndGetOperationById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOperationByIdCompleted(object state) {
            if ((this.GetOperationByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOperationByIdCompleted(this, new GetOperationByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOperationByIdAsync(int operationId) {
            this.GetOperationByIdAsync(operationId, null);
        }
        
        public void GetOperationByIdAsync(int operationId, object userState) {
            if ((this.onBeginGetOperationByIdDelegate == null)) {
                this.onBeginGetOperationByIdDelegate = new BeginOperationDelegate(this.OnBeginGetOperationById);
            }
            if ((this.onEndGetOperationByIdDelegate == null)) {
                this.onEndGetOperationByIdDelegate = new EndOperationDelegate(this.OnEndGetOperationById);
            }
            if ((this.onGetOperationByIdCompletedDelegate == null)) {
                this.onGetOperationByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOperationByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetOperationByIdDelegate, new object[] {
                        operationId}, this.onEndGetOperationByIdDelegate, this.onGetOperationByIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudyBank.PortableServices.Operations.WCFOperationService.BeginGetOperationByAccountIdCode(int accountId, string transactionCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOperationByAccountIdCode(accountId, transactionCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CloudyBank.PortableServices.Operations.OperationDto CloudyBank.PortableServices.Operations.WCFOperationService.EndGetOperationByAccountIdCode(System.IAsyncResult result) {
            return base.Channel.EndGetOperationByAccountIdCode(result);
        }
        
        private System.IAsyncResult OnBeginGetOperationByAccountIdCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int accountId = ((int)(inValues[0]));
            string transactionCode = ((string)(inValues[1]));
            return ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).BeginGetOperationByAccountIdCode(accountId, transactionCode, callback, asyncState);
        }
        
        private object[] OnEndGetOperationByAccountIdCode(System.IAsyncResult result) {
            CloudyBank.PortableServices.Operations.OperationDto retVal = ((CloudyBank.PortableServices.Operations.WCFOperationService)(this)).EndGetOperationByAccountIdCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOperationByAccountIdCodeCompleted(object state) {
            if ((this.GetOperationByAccountIdCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOperationByAccountIdCodeCompleted(this, new GetOperationByAccountIdCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOperationByAccountIdCodeAsync(int accountId, string transactionCode) {
            this.GetOperationByAccountIdCodeAsync(accountId, transactionCode, null);
        }
        
        public void GetOperationByAccountIdCodeAsync(int accountId, string transactionCode, object userState) {
            if ((this.onBeginGetOperationByAccountIdCodeDelegate == null)) {
                this.onBeginGetOperationByAccountIdCodeDelegate = new BeginOperationDelegate(this.OnBeginGetOperationByAccountIdCode);
            }
            if ((this.onEndGetOperationByAccountIdCodeDelegate == null)) {
                this.onEndGetOperationByAccountIdCodeDelegate = new EndOperationDelegate(this.OnEndGetOperationByAccountIdCode);
            }
            if ((this.onGetOperationByAccountIdCodeCompletedDelegate == null)) {
                this.onGetOperationByAccountIdCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOperationByAccountIdCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetOperationByAccountIdCodeDelegate, new object[] {
                        accountId,
                        transactionCode}, this.onEndGetOperationByAccountIdCodeDelegate, this.onGetOperationByAccountIdCodeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CloudyBank.PortableServices.Operations.WCFOperationService CreateChannel() {
            return new WCFOperationServiceClientChannel(this);
        }
        
        private class WCFOperationServiceClientChannel : ChannelBase<CloudyBank.PortableServices.Operations.WCFOperationService>, CloudyBank.PortableServices.Operations.WCFOperationService {
            
            public WCFOperationServiceClientChannel(System.ServiceModel.ClientBase<CloudyBank.PortableServices.Operations.WCFOperationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetOperationsByAccount(int accountID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = accountID;
                System.IAsyncResult _result = base.BeginInvoke("GetOperationsByAccount", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<CloudyBank.PortableServices.Operations.OperationDto> EndGetOperationsByAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<CloudyBank.PortableServices.Operations.OperationDto> _result = ((System.Collections.Generic.List<CloudyBank.PortableServices.Operations.OperationDto>)(base.EndInvoke("GetOperationsByAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMakeTransfer(int debitAccountId, int creditAccountId, decimal amount, string motif, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = debitAccountId;
                _args[1] = creditAccountId;
                _args[2] = amount;
                _args[3] = motif;
                System.IAsyncResult _result = base.BeginInvoke("MakeTransfer", _args, callback, asyncState);
                return _result;
            }
            
            public string EndMakeTransfer(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("MakeTransfer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMakeTransferToExternal(int debitAccountId, string creditAccountIban, decimal amount, string motif, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = debitAccountId;
                _args[1] = creditAccountIban;
                _args[2] = amount;
                _args[3] = motif;
                System.IAsyncResult _result = base.BeginInvoke("MakeTransferToExternal", _args, callback, asyncState);
                return _result;
            }
            
            public string EndMakeTransferToExternal(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("MakeTransferToExternal", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOperationById(int operationId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = operationId;
                System.IAsyncResult _result = base.BeginInvoke("GetOperationById", _args, callback, asyncState);
                return _result;
            }
            
            public CloudyBank.PortableServices.Operations.OperationDto EndGetOperationById(System.IAsyncResult result) {
                object[] _args = new object[0];
                CloudyBank.PortableServices.Operations.OperationDto _result = ((CloudyBank.PortableServices.Operations.OperationDto)(base.EndInvoke("GetOperationById", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOperationByAccountIdCode(int accountId, string transactionCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = accountId;
                _args[1] = transactionCode;
                System.IAsyncResult _result = base.BeginInvoke("GetOperationByAccountIdCode", _args, callback, asyncState);
                return _result;
            }
            
            public CloudyBank.PortableServices.Operations.OperationDto EndGetOperationByAccountIdCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                CloudyBank.PortableServices.Operations.OperationDto _result = ((CloudyBank.PortableServices.Operations.OperationDto)(base.EndInvoke("GetOperationByAccountIdCode", _args, result)));
                return _result;
            }
        }
    }
}
